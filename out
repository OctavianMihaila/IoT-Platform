#### stack.yml

version: '3.8'

configs:
  mosquitto.conf:
    file: ./mosquitto/mosquitto.conf

services:
  mqtt-broker:
    image: eclipse-mosquitto:latest
    ports:
      - "1883:1883"
    configs:
      - source: mosquitto.conf
        target: /mosquitto/config/mosquitto.conf
    networks:
      - iot_network

  influxdb:
    image: influxdb:latest
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      # - ./influxdb/config.toml:/etc/influxdb2/config.toml
    networks:
      - iot_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "80:3000"
    networks:
      - iot_network

  adapter:
    image: mhoctavian/adapter:latest
    depends_on:
      - mqtt-broker
      - influxdb
    networks:
      - iot_network

volumes:
  influxdb_data:
    driver: local

networks:
  iot_network:
    driver: overlay
#### test.sh

#!/bin/bash

# Configurează broker-ul MQTT și portul
BROKER_HOST="localhost"   # înlocuiește cu IP/hostname corespunzător
BROKER_PORT=1883          # portul implicit al broker-ului

echo "Trimit 10 mesaje diferite..."

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "UPB/RPi_1" \
  -m '{"BAT":99,"HUMID":40,"PRJ":"SCD","TMP":25.3,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "Dorinel/Zeus" \
  -m '{"Alarm":0,"RSSI":1500,"AQI":12,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "IoT/RandomRoom" \
  -m '{"TEMP":23.5,"HUMID":42,"SENSOR":"DHT11","status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "Sensors/Greenhouse" \
  -m '{"TEMPERATURE":30,"HUMIDITY":80,"CO2":550,"status":"WARN"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "Demo/DeviceA" \
  -m '{"BAT":45,"TMP":18.9,"Volt":3.7,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "Home/LivingRoom" \
  -m '{"Lights":1,"Temperature":22.1,"Presence":true,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "Office/SensorNode" \
  -m '{"HUMID":55,"VOC":33,"PM25":5,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "SmartFarm/Crops" \
  -m '{"soilMoisture":60,"NPK":"8-10-5","pH":6.4,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "City/Bucharest" \
  -m '{"Traffic":250,"AQI":45,"NoiseLevel":70,"status":"OK"}'

mosquitto_pub \
  -h "$BROKER_HOST" \
  -p "$BROKER_PORT" \
  -t "Demo/RandomSensors" \
  -m '{"value1":123,"value2":456,"value3":789,"status":"OK"}'


#### config.toml

[meta]
  dir = "/var/lib/influxdb2/meta"

[data]
  dir = "/var/lib/influxdb2/data"
  wal-dir = "/var/lib/influxdb2/wal"

[http]
  bind-address = ":8086"
  access-log-enabled = true
  auth-enabled = false  # Setează pe true dacă activezi autentificarea

#### run.sh

#!/bin/bash

# Name of the Docker registry image, e.g., your Docker Hub username and repository name
IMAGE_NAME="mhoctavian/adapter:latest"
STACK_NAME="tema3"

# Function to stop everything immediately
stop_all() {
    echo "Stopping everything..."
    docker stack rm "$STACK_NAME"
    echo "Waiting for the stack to fully remove..."
    sleep 10
    echo "Pruning networks and volumes..."
    docker network prune -f
    docker volume prune -f
    echo "All services and networks stopped."
}

if docker info | grep -q "Swarm: active"; then
    stop_all
fi

echo "Initializing Docker Swarm..."
docker swarm init

echo "Building adapter image..."
docker build -t "$IMAGE_NAME" ./adapter

echo "Pushing image $IMAGE_NAME to Docker registry..."
docker push "$IMAGE_NAME"

echo "Deploying stack $STACK_NAME..."
docker stack deploy -c stack.yml "$STACK_NAME"

echo "Deployment completed! Checking services..."
docker service ls
#### mosquitto.conf

allow_anonymous true
listener 1883
#### adapter.py

import json
import time
from paho.mqtt.client import Client, CallbackAPIVersion
from influxdb_client import InfluxDBClient, Point, WritePrecision

# Configuration
BROKER = "mqtt-broker"
PORT = 1883
TOPIC = "#"
INFLUXDB_URL = "http://influxdb:8086"
INFLUXDB_TOKEN = "my-token"
INFLUXDB_BUCKET = "iot_data"
INFLUXDB_ORG = "my-org"

def on_message(client, userdata, message):
    topic = message.topic
    payload = message.payload.decode()
    try:
        # Parse JSON payload
        data = json.loads(payload)
        timestamp = data.get("timestamp", time.time())
        
        # Prepare InfluxDB entries
        series_prefix = topic.replace("/", ".")
        points = []
        for key, value in data.items():
            if isinstance(value, (int, float)):
                point = Point(series_prefix).field(key, value).time(timestamp, WritePrecision.NS)
                points.append(point)

        # Write to InfluxDB
        if points:
            with InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG) as influx_client:
                write_api = influx_client.write_api()
                write_api.write(bucket=INFLUXDB_BUCKET, org=INFLUXDB_ORG, record=points)
                print(f"Data written to InfluxDB: {points}")
    except json.JSONDecodeError:
        print(f"Invalid JSON payload: {payload}")
    except Exception as e:
        print(f"Error processing message: {e}")

# MQTT client setup
mqtt_client = Client(callback_api_version=CallbackAPIVersion.VERSION2)
mqtt_client.on_message = on_message
mqtt_client.connect(BROKER, PORT)
mqtt_client.subscribe(TOPIC)

print("Adapter is listening for messages...")
mqtt_client.loop_forever()

#### Dockerfile

FROM python:3.9-slim
WORKDIR /app
COPY . .
RUN pip install paho-mqtt influxdb-client
CMD ["python", "-u", "adapter.py"]

