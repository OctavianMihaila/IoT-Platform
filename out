#### stack.yml

version: '3.8'

configs:
  mosquitto.conf:
    file: ./mosquitto/mosquitto.conf
  influxdb.conf:
    file: ./influxdb/influxdb.conf

services:
  mqtt-broker:
    image: eclipse-mosquitto:latest
    ports:
      - "1883:1883"
    configs:
      - source: mosquitto.conf
        target: /mosquitto/config/mosquitto.conf
    networks:
      - iot_network

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    configs:
      - source: influxdb.conf
        target: /etc/influxdb/influxdb.conf
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./influxdb/create_db.sh:/docker-entrypoint-initdb.d/create_db.sh
    networks:
      - iot_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "80:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=asistent
      - GF_SECURITY_ADMIN_PASSWORD=grafanaSCD2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - iot_network
    depends_on:
      - influxdb

  adapter:
    image: mhoctavian/adapter:latest
    # This environment variable controls debug logging in Python
    environment:
      - DEBUG_DATA_FLOW=true
    depends_on:
      - mqtt-broker
      - influxdb
    networks:
      - iot_network

volumes:
  influxdb_data:
    driver: local
  grafana_data:
    driver: local

networks:
  iot_network:
    driver: overlay
#### test.sh

#!/bin/bash

BROKER_HOST="localhost" 
BROKER_PORT=1883

if [[ "$1" == "show" ]]; then
  echo "Fetching data from InfluxDB..."

  docker exec $(docker ps -q -f name=tema3_influxdb) influx -database iot_data -execute "SHOW MEASUREMENTS" -format csv | tail -n +2 | cut -d, -f2 | while read measurement; do \
    echo "Querying measurement: $measurement"; \
    docker exec $(docker ps -q -f name=tema3_influxdb) influx -database iot_data -execute "SELECT * FROM \"$measurement\" LIMIT 10"; \
  done

  exit 0
fi

if [[ "$1" == "run" ]]; then
    echo "Publishing test messages to MQTT broker..."

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "UPB/RPi_1" \
    -m '{"BAT":99,"HUMID":40,"PRJ":"SCD","TMP":25.3,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "UPB/RPi_1" \
    -m '{"BAT":85,"HUMID":55,"TMP":28.1,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Dorinel/Zeus" \
    -m '{"Alarm":0,"RSSI":1500,"AQI":12,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Dorinel/Zeus" \
    -m '{"Alarm":1,"RSSI":1200,"AQI":15,"status":"WARN"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "IoT/RandomRoom" \
    -m '{"TEMP":23.5,"HUMID":42,"SENSOR":"DHT11","status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "IoT/RandomRoom" \
    -m '{"TEMP":24.1,"HUMID":38,"SENSOR":"DHT11","status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "IoT/RandomRoom" \
    -m '{"TEMP":22.9,"HUMID":45,"SENSOR":"DHT11","status":"WARN"}'

    # Topic 4: Sensors/Greenhouse
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Sensors/Greenhouse" \
    -m '{"TEMPERATURE":30,"HUMIDITY":80,"CO2":550,"status":"WARN"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Sensors/Greenhouse" \
    -m '{"TEMPERATURE":32,"HUMIDITY":85,"CO2":560,"status":"CRITICAL"}'

    # Topic 5: SmartFarm/Crops
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "SmartFarm/Crops" \
    -m '{"soilMoisture":60,"NPK":"8-10-5","pH":6.4,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "SmartFarm/Crops" \
    -m '{"soilMoisture":55,"NPK":"10-15-5","pH":6.2,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "SmartFarm/Crops" \
    -m '{"soilMoisture":65,"NPK":"8-10-5","pH":6.6,"status":"OK"}'

    # Topic 6: Home/LivingRoom
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Home/LivingRoom" \
    -m '{"Lights":1,"Temperature":22.1,"Presence":true,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Home/LivingRoom" \
    -m '{"Lights":0,"Temperature":21.5,"Presence":false,"status":"OK"}'

    # Topic 7: Demo/DeviceA
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Demo/DeviceA" \
    -m '{"BAT":45,"TMP":18.9,"Volt":3.7,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Demo/DeviceA" \
    -m '{"BAT":40,"TMP":19.5,"Volt":3.8,"status":"OK"}'

    # Topic 8: City/Bucharest
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "City/Bucharest" \
    -m '{"Traffic":250,"AQI":45,"NoiseLevel":70,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "City/Bucharest" \
    -m '{"Traffic":300,"AQI":50,"NoiseLevel":75,"status":"WARN"}'

    # Topic 9: Office/SensorNode
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Office/SensorNode" \
    -m '{"HUMID":55,"VOC":33,"PM25":5,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Office/SensorNode" \
    -m '{"HUMID":50,"VOC":35,"PM25":7,"status":"OK"}'

    # Topic 10: New Topic: Lab/Sensors
    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Lab/Sensors" \
    -m '{"Temperature":22.5,"Pressure":1012,"Humidity":55,"status":"OK"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Lab/Sensors" \
    -m '{"Temperature":23.0,"Pressure":1015,"Humidity":58,"status":"WARN"}'

    mosquitto_pub \
    -h "$BROKER_HOST" \
    -p "$BROKER_PORT" \
    -t "Lab/Sensors" \
    -m '{"Temperature":24.1,"Pressure":1010,"Humidity":60,"status":"CRITICAL"}'
    exit 0
fi

# Invalid usage
echo "Usage: $0 {show|run}"
exit 1

#### create_db.sh

#!/bin/bash

echo "Creating database 'iot_data' with unlimited retention..."
influx -host localhost -port 8086 -execute "CREATE DATABASE iot_data WITH DURATION INF"
echo "Database 'iot_data' created with unlimited retention."

#### influxdb.conf

[meta]
  dir = "/var/lib/influxdb/meta"

[data]
  dir = "/var/lib/influxdb/data"
  wal-dir = "/var/lib/influxdb/wal"

[coordinator]
  write-timeout = "10s"

[http]
  # Disable HTTP authentication
  auth-enabled = false

#### iot_UPB_generator.sh

#!/bin/bash

BROKER_HOST="localhost"
BROKER_PORT=1883
TOPIC="UPB/RPi_1"

# Function to simulate continuous message generation
generate_data() {
  echo "Generating data for topic: $TOPIC"

  local iterations=${1:-100}  # Default to 100 messages if not specified
  local interval=${2:-1}      # Default to 1 second interval if not specified

  for ((i = 1; i <= iterations; i++)); do
    local bat=$((RANDOM % 20 + 80))        # Random BAT value between 80 and 100
    local humid=$((RANDOM % 20 + 30))      # Random HUMID value between 30 and 50
    local tmp=$(awk -v min=20 -v max=30 'BEGIN{srand(); print min+rand()*(max-min)}')  # Random TMP value between 20.0 and 30.0

    mosquitto_pub \
      -h "$BROKER_HOST" \
      -p "$BROKER_PORT" \
      -t "$TOPIC" \
      -m "{\"BAT\":$bat,\"HUMID\":$humid,\"TMP\":$tmp,\"status\":\"OK\"}"

    echo "Published message $i/$iterations: {\"BAT\":$bat,\"HUMID\":$humid,\"TMP\":$tmp,\"status\":\"OK\"}"

    sleep "$interval"
  done

  echo "Finished generating $iterations messages for topic: $TOPIC"
}

if [[ "$1" == "run" ]]; then
  generate_data "${2:-100}" "${3:-1}"
  exit 0
fi

if [[ "$1" == "show" ]]; then
  echo "Fetching data from InfluxDB..."

  docker exec $(docker ps -q -f name=tema3_influxdb) influx -database iot_data -execute "SHOW MEASUREMENTS" -format csv | tail -n +2 | cut -d, -f2 | while read measurement; do \
    echo "Querying measurement: $measurement"; \
    docker exec $(docker ps -q -f name=tema3_influxdb) influx -database iot_data -execute "SELECT * FROM \"$measurement\" LIMIT 10"; \
  done

  exit 0
fi

# Invalid usage
echo "Usage: $0 {run <iterations> <interval>|show}"
exit 1


#### dashboards.yml

apiVersion: 1

providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    editable: true
    options:
      path: /etc/grafana/provisioning/dashboards


#### datasources.yml

apiVersion: 1

datasources:
  - name: InfluxDB
    type: influxdb
    access: proxy
    url: http://influxdb:8086
    database: iot_data
    isDefault: true


#### run.sh

#!/bin/bash

# Name of the Docker registry image, e.g., your Docker Hub username and repository name
IMAGE_NAME="mhoctavian/adapter:latest"
STACK_NAME="tema3"

# Function to stop everything immediately (reset functionality)
reset_stack() {
    echo "Stopping everything..."
    docker stack rm "$STACK_NAME"
    echo "Waiting for the stack to fully remove..."
    sleep 10
    echo "Pruning networks and volumes..."
    docker network prune -f
    docker volume prune -f
    echo "All services and networks stopped."

    echo "Initializing Docker Swarm..."
    docker swarm init

    echo "Building adapter image..."
    docker build -t "$IMAGE_NAME" ./adapter

    echo "Pushing image $IMAGE_NAME to Docker registry..."
    docker push "$IMAGE_NAME"

    echo "Deploying stack $STACK_NAME..."
    docker stack deploy -c stack.yml "$STACK_NAME"

    echo "Deployment completed! Checking services..."
    docker service ls
}

# Function to restart the stack without deleting persistent data
restart_stack() {
    echo "Restarting stack $STACK_NAME..."
    docker stack deploy -c stack.yml "$STACK_NAME"
    echo "Deployment completed! Checking services..."
    docker service ls
}

# Function to show usage
show_usage() {
    echo "Usage: $0 {reset|restart}"
    echo
    echo "reset   - Stops all services, deletes volumes and networks, rebuilds everything from scratch."
    echo "restart - Restarts services while preserving persistent data (volumes) and shows configuration."
    exit 1
}

# Main logic to handle reset and restart commands
if [[ "$#" -ne 1 ]]; then
    show_usage
fi

case "$1" in
    reset)
        reset_stack
        ;;
    restart)
        restart_stack
        ;;
    *)
        show_usage
        ;;
esac

#### mosquitto.conf

allow_anonymous true
listener 1883
#### adapter.py

import json
import time
import os
from datetime import datetime
from paho.mqtt.client import Client, CallbackAPIVersion
from influxdb_client import InfluxDBClient, Point, WritePrecision

BROKER = "mqtt-broker"
PORT = 1883
TOPIC = "#"
INFLUXDB_URL = "http://influxdb:8086"
INFLUXDB_TOKEN = ""
INFLUXDB_BUCKET = "iot_data"
INFLUXDB_ORG = "my-org"

DEBUG_MODE = os.getenv("DEBUG_DATA_FLOW", "false").lower() == "true"

def debug_log(msg: str):
    if DEBUG_MODE:
        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"{now_str} {msg}", flush=True)

def on_message(client, userdata, message):
    topic = message.topic
    payload = message.payload.decode()

    debug_log(f"Received a message by topic [{topic}]")

    try:
        data = json.loads(payload)
        # If the JSON has 'timestamp', try to use it; otherwise use now
        # This part is flexible depending on how you want to handle your 'timestamp' field
        if 'timestamp' in data:
            if isinstance(data['timestamp'], (int, float)):
                # It's numeric => convert to datetime
                ts_float = data['timestamp']
                debug_log(f"Data timestamp is numeric => {ts_float}")
                timestamp_dt = datetime.utcfromtimestamp(ts_float)
            else:
                # It's a string => attempt to parse or fallback to now
                debug_log("Data timestamp is a string => parse it or fallback to now")
                try:
                    timestamp_dt = datetime.fromisoformat(data['timestamp'])
                except ValueError:
                    debug_log("Could not parse string timestamp, falling back to now")
                    timestamp_dt = datetime.utcnow()
        else:
            debug_log("Data timestamp is : NOW")
            timestamp_dt = datetime.utcnow()

        series_prefix = topic.replace("/", ".")
        points = []
        for key, value in data.items():
            if isinstance(value, (int, float)):
                point = Point(series_prefix) \
                    .field(key, value) \
                    .time(timestamp_dt, WritePrecision.NS) # Max time precision
                points.append(point)
                debug_log(f"{series_prefix}.{key} => {value}")

        if points:
            with InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG) as influx_client:
                write_api = influx_client.write_api()
                write_api.write(bucket=INFLUXDB_BUCKET, org=INFLUXDB_ORG, record=points)
                debug_log(f"Data written to InfluxDB: {points}")

    except json.JSONDecodeError:
        print(f"Invalid JSON payload: {payload}", flush=True)
    except Exception as e:
        print(f"Error processing message: {e}", flush=True)

mqtt_client = Client(callback_api_version=CallbackAPIVersion.VERSION2)
mqtt_client.on_message = on_message
mqtt_client.connect(BROKER, PORT)
mqtt_client.subscribe(TOPIC)

print("Adapter is listening for messages...", flush=True)
mqtt_client.loop_forever()

#### Dockerfile

FROM python:3.9-slim
WORKDIR /app
COPY . .
RUN pip install paho-mqtt influxdb-client
CMD ["python", "-u", "adapter.py"]

